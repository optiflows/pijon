#!/usr/bin/env python

from argparse import ArgumentParser
import json
import os

from pijon import Pijon


def parse_args():
    parser = ArgumentParser()
    subparsers = parser.add_subparsers(dest='command')
    parser.add_argument(
        '-f', '--folder', type=str, default='migrations/',
        help="Migrations' folder"
    )

    # New migration
    sub = subparsers.add_parser('new', help='Create a migration file')
    sub.add_argument('name', type=str, nargs='+', help='Migration name')

    # Migrate
    sub = subparsers.add_parser('migrate', help='Migrate')
    sub.add_argument('input', type=str, help='JSON file to migrate')
    sub.add_argument('output', type=str, help='JSON file to write')

    return parser, parser.parse_args()


class PijonScript(object):

    def __init__(self, args):
        self.args = args
        self.pijon = Pijon(folder=args.folder)

    @classmethod
    def execute(cls, args):
        script = cls(args)
        getattr(script, args.command)()

    def new(self):
        filename = '{0:04d}_{name}.py'.format(
            self.pijon.last_migration + 1,
            name='_'.join(self.args.name)
        )
        with open(os.path.join(self.pijon.folder, filename), 'w') as f:
            f.write('\ndef migrate(data):\n    pass\n')
        print("File '{}' created".format(filename))

    def migrate(self):
        with open(self.args.input, 'r') as f:
            input_data = json.loads(f.read())
        self.pijon.migrate(input_data)
        with open(self.args.output, 'w') as f:
            f.write(json.dumps(input_data, sort_keys=True, indent=4))


def main():
    parser, args = parse_args()
    if not args.command:
        print(parser.format_help())
        return
    PijonScript.execute(args)


if __name__ == '__main__':
    main()
